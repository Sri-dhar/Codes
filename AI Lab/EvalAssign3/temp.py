
import random
import math

no_of_students = 10
no_of_groups = 3
calculated_diversity_call_count = 1


def calculate_diversity(groups):
    diversity = 0
    for group in groups:
        group_avg = sum(group) / (len(group) + 1)
        for student in group:
            diversity += abs(student - group_avg)
    print(
        f"Diversity calculated at the iteration {calculated_diversity_call_count} is:{diversity} "
    )
    calculated_diversity_call_count += 1
    return diversity


def get_random_groups():
    groups = []
    for i in range(no_of_groups):
        groups.append([])
    for student in range(no_of_students):
        groups[random.randint(0, no_of_groups - 1)].append(student)
    print("The groups generated by the get_random_groups function are: ")
    print(groups)
    return groups


def get_neighbour_groups(groups):
    new_groups = []
    for i in range(no_of_groups):
        new_groups.append([])
    for group in groups:
        for student in group:
            new_groups[random.randint(0, no_of_groups - 1)].append(student)
    return new_groups


def get_probability(old_diversity, new_diversity, temperature):
    return math.exp((old_diversity - new_diversity) / temperature)


def stochastic_hill_climbing():
    groups = get_random_groups()
    old_diversity = calculate_diversity(groups)
    temperature = 1
    while temperature > 0.0001:
        new_groups = get_neighbour_groups(groups)
        new_diversity = calculate_diversity(new_groups)
        if new_diversity < old_diversity:
            groups = new_groups
            old_diversity = new_diversity
        else:
            probability = get_probability(old_diversity, new_diversity, temperature)
            if random.random() < probability:
                groups = new_groups
                old_diversity = new_diversity
        temperature *= 0.99
    return groups


groups = stochastic_hill_climbing()

print("The final groups are: ")
print(groups)
print("\nThe diversity of the final groups is: ")
print(calculate_diversity(groups))
